// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ads      Ad[]
  sessions Session[]
  accounts Account[]
  embeds   VideoEmbed[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ad {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  duration     Int
  status       String   @default("active")
  weight       Int      @default(1) // Higher weight = higher probability
  forceDisplay Boolean  @default(false) // If true, this ad always shows
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments    AdSegment[]
  impressions AdImpression[]
}

model AdSegment {
  id        String   @id @default(cuid())
  adId      String
  quality   Int
  filepath  String
  filesize  Int
  createdAt DateTime @default(now())

  ad Ad @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@unique([adId, quality])
}

model AdImpression {
  id        String   @id @default(cuid())
  adId      String
  videoId   String
  referrer  String?  @db.Text // The page/site where the ad was shown
  userAgent String?  @db.Text // Browser/device info
  ipAddress String?  @db.VarChar(45) // IPv4 or IPv6 address
  country   String?  @db.VarChar(2) // ISO 3166-1 alpha-2 country code
  timestamp DateTime @default(now())

  ad Ad @relation(fields: [adId], references: [id], onDelete: Cascade)
}

model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id // PornHub category ID (or custom 9998, 9999)
  name      String   @db.VarChar(100)
  isCustom  Boolean  @default(false) // Custom categories like Japanese, Chinese
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isCustom])
}

model Video {
  id            String   @id @default(cuid())
  vodId         String   @unique // External video ID (e.g., ph123456)
  vodName       String   @db.VarChar(255) // Translated title (if translation enabled) or original
  originalTitle String?  @db.VarChar(255) // Original title before translation (for comparison)
  typeId        Int // Category type_id (primary category)
  typeName      String   @db.VarChar(100)
  vodClass      String?  @db.VarChar(500) // Comma-separated category names (e.g., "Asian,Babe,Teen")
  vodEn         String?  @db.VarChar(255) // URL-friendly slug
  vodTime       DateTime @default(now())
  vodRemarks    String?  @db.VarChar(100) // HD, duration, etc.
  vodPlayFrom   String   @default("YourAPI") @db.VarChar(100)
  vodPic        String?  @db.Text // Thumbnail URL
  vodArea       String?  @db.VarChar(100)
  vodLang       String?  @db.VarChar(50)
  vodYear       String?  @db.VarChar(10)
  vodActor      String?  @db.Text // Comma-separated
  vodDirector   String?  @db.Text
  vodContent    String?  @db.Text // Description
  vodPlayUrl    String   @db.Text // Episode$URL format
  views         Int      @default(0)
  duration      Int? // Duration in seconds
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([typeId])
  @@index([vodTime])
  @@index([views])
}

// Domain access control - whitelist/blacklist management
model DomainAccess {
  id          String   @id @default(cuid())
  domain      String   @unique @db.VarChar(255) // e.g., "example.com"
  status      String   @default("allowed") // allowed, blocked
  type        String   @default("whitelist") // whitelist, blacklist
  reason      String?  @db.Text // Why blocked/allowed
  addedBy     String?  // Admin user ID who added this rule
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requestLogs ApiRequestLog[]

  @@index([status])
  @@index([domain])
}

// API request logging for analytics and monitoring
model ApiRequestLog {
  id                String   @id @default(cuid())
  domain            String?  @db.VarChar(255) // Extracted from referer/origin/host
  domainAccessId    String? // Reference to DomainAccess if exists
  endpoint          String   @db.VarChar(500) // /api/home, /api/video/123, etc.
  method            String   @db.VarChar(10) // GET, POST, etc.
  statusCode        Int // 200, 403, etc.
  responseTime      Int? // Response time in ms
  ipAddress         String?  @db.VarChar(45) // IPv4 or IPv6
  userAgent         String?  @db.Text
  referer           String?  @db.Text
  hasReferrer       Boolean  @default(false) // Whether referer header was present
  ipSessionHash     String?  @db.VarChar(16) // SHA256 hash of IP:UserAgent for tracking direct requests
  clientFingerprint String?  @db.VarChar(16) // Hash of User-Agent + Accept headers for correlation
  country           String?  @db.VarChar(2) // ISO country code
  blocked           Boolean  @default(false) // Was request blocked?
  timestamp         DateTime @default(now())

  domainAccess DomainAccess? @relation(fields: [domainAccessId], references: [id], onDelete: SetNull)

  @@index([domain])
  @@index([endpoint])
  @@index([timestamp])
  @@index([blocked])
  @@index([domainAccessId])
  @@index([ipSessionHash]) // For grouping direct/unknown requests
  @@index([clientFingerprint]) // For tracking by fingerprint
}

// Cache operations logging for monitoring cache effectiveness
model CacheLog {
  id        String   @id @default(cuid())
  action    String   @db.VarChar(50) // "set", "get", "clear", "revalidate"
  target    String?  @db.VarChar(255) // "all", "video-{id}", "home", etc.
  videoId   String?  @db.VarChar(255) // Video ID if action is for specific video
  success   Boolean  @default(true)
  reason    String?  @db.Text // Reason for failure if applicable
  timestamp DateTime @default(now())

  @@index([action])
  @@index([target])
  @@index([timestamp])
  @@index([videoId])
}

// Video embed system for ad-network-style embeds
model VideoEmbed {
  id                    String   @id @default(cuid())
  videoId               String   // PornHub video ID
  title                 String   @db.VarChar(255) // Original title from API (for searching/fallback)
  displayName           String?  @db.VarChar(255) // Custom display name for the embed (user-facing, optional)
  redirectUrl           String   @db.Text // Custom destination URL
  enabled               Boolean  @default(true)

  // Local preview hosting
  previewM3u8Path       String?  @db.VarChar(500) // Path to local m3u8 file (relative to data dir)
  previewSegmentDir     String?  @db.VarChar(500) // Directory containing .ts segments
  previewDownloadedAt   DateTime? // When preview was downloaded
  previewExpiry         DateTime? // When preview download expires (optional for re-download)
  previewSourceUrl      String?  @db.Text // Original source: video ID, m3u8 URL, or video link

  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  analytics  EmbedAnalytics[]

  @@index([videoId])
  @@index([createdBy])
  @@index([createdAt])
}

// Analytics for embed impressions and clicks
model EmbedAnalytics {
  id             String   @id @default(cuid())
  embedId        String
  eventType      String   @db.VarChar(20) // "impression" or "click"
  referrerDomain String?  @db.VarChar(255) // Domain where embed was used
  userAgent      String?  @db.Text
  ipHash        String?  @db.VarChar(64) // SHA256 hash of IP for privacy
  timestamp      DateTime @default(now())

  embed VideoEmbed @relation(fields: [embedId], references: [id], onDelete: Cascade)

  @@index([embedId])
  @@index([eventType])
  @@index([referrerDomain])
  @@index([timestamp])
}
