// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ads       Ad[]
  sessions  Session[]
  accounts  Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ad {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  duration    Int
  status      String   @default("active")
  weight      Int      @default(1) // Higher weight = higher probability
  forceDisplay Boolean @default(false) // If true, this ad always shows
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments    AdSegment[]
  impressions AdImpression[]
}

model AdSegment {
  id        String   @id @default(cuid())
  adId      String
  quality   Int
  filepath  String
  filesize  Int
  createdAt DateTime @default(now())

  ad Ad @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@unique([adId, quality])
}

model AdImpression {
  id        String   @id @default(cuid())
  adId      String
  videoId   String
  referrer  String?  @db.Text // The page/site where the ad was shown
  userAgent String?  @db.Text // Browser/device info
  ipAddress String?  @db.VarChar(45) // IPv4 or IPv6 address
  country   String?  @db.VarChar(2) // ISO 3166-1 alpha-2 country code
  timestamp DateTime @default(now())

  ad Ad @relation(fields: [adId], references: [id], onDelete: Cascade)
}

model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id            String   @id @default(cuid())
  vodId         String   @unique // External video ID (e.g., ph123456)
  vodName       String   @db.VarChar(255)
  typeId        Int      // Category type_id (primary category)
  typeName      String   @db.VarChar(100)
  vodClass      String?  @db.VarChar(500) // Comma-separated category names (e.g., "Asian,Babe,Teen")
  vodEn         String?  @db.VarChar(255) // URL-friendly slug
  vodTime       DateTime @default(now())
  vodRemarks    String?  @db.VarChar(100) // HD, duration, etc.
  vodPlayFrom   String   @default("YourAPI") @db.VarChar(100)
  vodPic        String?  @db.Text // Thumbnail URL
  vodArea       String?  @db.VarChar(100)
  vodLang       String?  @db.VarChar(50)
  vodYear       String?  @db.VarChar(10)
  vodActor      String?  @db.Text // Comma-separated
  vodDirector   String?  @db.Text
  vodContent    String?  @db.Text // Description
  vodPlayUrl    String   @db.Text // Episode$URL format
  views         Int      @default(0)
  duration      Int?     // Duration in seconds
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([typeId])
  @@index([vodTime])
  @@index([views])
}
